---
format: html
---

[Creating interactive visualizations with {ggiraph} (with or without Shiny) by Albert Rapp](https://albert-rapp.de/posts/ggplot2-tips/17_ggiraph/17_ggiraph#combine-ggirafe-and-patchwork)

```{r}
#| label: install-packages-and-load-libraries
#| code-fold: true
#| code-summary: "Step 1: Efficiently install packages and load libraries"
if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}

pacman::p_load(
  fs,
  here,
  rio,
  tidyverse,
  ggplot2,
  patchwork,
  ggiraph,
  shiny,
  wesanderson,
  epoxy
  )
```

```{r}
final_dataset_paths <- dir_ls(here("data", "output"))

dfs <- final_dataset_paths %>%
  map(import) %>%
  set_names(map(names(.), ~ str_replace(.x, ".*_(.*)-final\\.csv$", "\\1") %>%
              str_replace_all(., "-", "_")))
```

Conversions: clams lbs > g

```{r}
dfs$clam_growth_data <- dfs$clam_growth_data %>% 
  mutate(weight = weight * 453.592)
```

- Create units vector and add to dfs
- Subset each df to specified columns
- Format values

```{r}
# Define a function to create named vectors
create_units_vector <- function(names, unit) {
  setNames(rep(unit, length(names)), names)
}

# Define names and units
names_units <- list(
  "cells/ml" = c(
    "heterotrophic_bacteria",
    "large_phytoplankton",
    "synechococcus_population_1",
    "synechococcus_population_2",
    "prochlorococcus",
    "myster_cells_events"
  ),
  "mol/L" = c(
    "phosphate",
    "silicate",
    "nitrate_nitrite",
    "ammonia"
  ),
  "ug/L" = c(
    "chlorophyll_a"
  ),
  "mg/L" = c(
    "dissolved_oxygen",
    "ksf_rdo_concentration",
    "ksf_rdo_saturation",
    "ksf_ammonium"
    ),
  "C" = c(
    "water_temperature",
    "outdoor_temperature"
    ),
  "g" = "weight",
  "mS/cm" = "salinity",
  "ft" = "visibility",
  "PSU" = "ksf_salinity",
  "g/cm3" = "ksf_density",
  "PPT" = "ksf_total_dissolved_solids",
  "RFU" = "ksf_chlorophyll_a_fluorescence",
  "mph" = "wind_speed_mph",
  "in/hr" = "hourly_rain_inch_hr"
)

# Create the named vector using map and flatten from purrr
units_vector <- names_units %>%
  imap(create_units_vector) %>%
  flatten_chr()

# Print the result
units_vector
```

```{r}
#| eval: false
# # Function to pivot, apply units, and label the dataset
# apply_units_after_pivot <- function(df, name) {
#   df %>%
#     mutate(across(-date, as.character)) %>%  # Convert all columns except 'date' to character
#     pivot_longer(
#       cols = -date,
#       names_to = "var",
#       values_to = "value"
#     ) %>%
#     mutate(
#       unit = if_else(var %in% names(units_vector), units_vector[var], NA_character_),
#       dataset_name = name  # Add the dataset name
#     )
# }

# Use imap_dfr to apply the function and combine using map_dfr, passing dataset names
dfs_combined <- imap_dfr(dfs, apply_units_after_pivot, .id = "dataset_name")
```

```{r}
#| eval: false

dfs_combined %>% 
  select(-c(clams_color, ))
```



Cell Growth Changes - Water Samples Dataset
Visualizes the following variables from the water sampling data set: hetero trophic, large phytoplankton, synechococcus 1, synechococcus 2, prochloroccocus, mystery cells.
Shows these variables of cells per location and at different depths (like we had before in the app). Data point 2 is missing (this is correct due to an error). Unit of analysis that goes behind the name is 'cells/ml'. Make sure metric/measurement unit is behind the name in the graphs. It visualizes 1 parameter at the time that you can select through a fold-out menu of the y-variables (like we had in the last shiny app).

```{r}
#| eval: false

cell_growth_changes <- dfs$water_samples_data %>% 
  rename("myster_cells_events" = lysbeths_mystery_cells_events) %>% 
  select(c(
    round,
    date,
    location,
    depth,
    heterotrophic_bacteria,
    large_phytoplankton,
    synechococcus_population_1,
    synechococcus_population_2,
    prochlorococcus,
    myster_cells_events
  )) %>%
  mutate(
    depth = as.factor(depth),
    location = if_else(location == "Mid Buoy", "Middle Buoy", location)
    ) 
```

```{r}
location_coords <- data.frame(
  location = c("Back Buoy", "Middle Buoy",
               "Production Dock", "Auwai"),
  lat = c(21.8875, 21.8865556, 21.8851, 21.885),
  lon = c(-159.5268, -159.5273056, -159.5276, -159.5281)
)
```

```{r}
get_unit <- function(var, names_units) {
  unit <- names(names_units)[detect_index(names_units, ~ var %in% .)]
  if (!is.null(unit)) {
    return(unit)
  } else {
    return(NA)
  }
}

weight_unit <- get_unit("weight", names_units)

oyster_growth <- dfs$oyster_growth_data %>% 
  select(-oyster_chlorophyll)

# Define colors from the palette
blue_color <- "#0A9F9D"  # A blue-like color from your palette
dark_brown_color <- "#C18748"  # A dark brown color from your palette
light_brown_color <- "#CEB175"

# Set dynamic limits based on both datasets
date_min <- min(min(oyster_growth$date, na.rm = TRUE), min(clam_growth$date, na.rm = TRUE))
date_max <- max(max(oyster_growth$date, na.rm = TRUE), max(clam_growth$date, na.rm = TRUE))

breaks_dates = seq(date_min, date_max, by = "1 week")
labels_dates = format(breaks_dates, "%m/%d/%Y")

# Plotting code using specified colors
p <- ggplot(oyster_growth, aes(x = date, y = weight)) +
  geom_line(color = blue_color, size = 2) +  
  # geom_text(aes(label = round(weight, 2)),
  #           vjust = -2, 
  #           hjust = 0.65,
  #           color = "black",
  #           size = 3) +
  geom_point_interactive(
    aes(size = weight, 
        color = light_brown_color,  # Set the color for the points
        tooltip = paste0("Weight: ", 
                         round(weight, 2), 
                         " (", 
                         weight_unit, 
                         ")"), 
        data_id = date),
    alpha = 0.9,  # Set transparency of the points
    hover_css = paste0("fill: ", dark_brown_color, ";"),
    show.legend = FALSE  # This argument removes the size legend
  ) +
  scale_size_continuous(range = c(3, 10)) +
  labs(
    title = "Small Oysters",
    x = "Date",
    y = paste0("Weight", " (", weight_unit, ")")
  ) +
  scale_y_continuous(limits = c(NA, max(oyster_growth$weight) * 1.1)) +
  scale_x_date(
    breaks = breaks_dates,
    labels = labels_dates,
    limits = c(date_min, date_max)
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1), 
    axis.title.x = element_text(size = 14, face = "bold", margin = margin(t = 10, b = 10)), 
  axis.title.y = element_text(size = 14, face = "bold", margin = margin(t = 10, r = 10)), 
    axis.text = element_text(size = 10),  # Axis labels size 10
    legend.position = "none"  # This will remove all legends
  ) +
  scale_color_identity()  # Ensure that the color values are taken literally 

p

# Convert ggplot object to ggiraph
interactive_plot <- girafe(ggobj = p)

# Print the interactive plot
interactive_plot
```

```{r}
clam_growth <- dfs$clam_growth_data 
```


```{r}
p2 <- ggplot(clam_growth, aes(x = date, y = weight, group = grouping_variable)) +
  geom_line(color = blue_color, size = 2) +
  geom_point_interactive(
    aes(size = weight, 
        color = light_brown_color,  # Set the color for the points
        tooltip = paste0("Weight: ", 
                         round(weight, 2), 
                         " (", 
                         weight_unit, 
                         ")"), 
        data_id = date),
    alpha = 0.9,  # Set transparency of the points
    hover_css = paste0("fill: ", dark_brown_color, ";"),
    show.legend = FALSE  # This argument removes the size legend
  ) +
  scale_size_continuous(range = c(3, 10)) +
  labs(
    title = "Clams",
    x = "Date",
    y = paste0("Weight", " (", weight_unit, ")")
  ) +
  scale_y_continuous(limits = c(NA, max(clam_growth$weight) * 1.1)) +
  scale_x_date(
    breaks = breaks_dates,
    labels = labels_dates,
    limits = c(date_min, date_max)
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1), 
    axis.title.x = element_text(size = 14, face = "bold", margin = margin(t = 10, b = 10)), 
  axis.title.y = element_text(size = 14, face = "bold", margin = margin(t = 10, r = 10)), 
    axis.text = element_text(size = 10),  # Axis labels size 10
    legend.position = "none"  # This will remove all legends
  ) +
  scale_color_identity()
            # theme(
            #   axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1, size = 14),
            #   axis.text.y = element_text(margin = margin(r = 10), size = 14),
            #   axis.title.x = element_text(margin = margin(t = 20), face = "bold", size = 18),
            #   axis.title.y = element_text(face = "bold", margin = margin(r = 5), size = 18),
            #   plot.title = element_text(hjust = 0.5, face = "bold", size = 22),
            #   legend.position = "bottom",
            #   legend.title = element_text(face = "bold", size = 14),
            #   legend.text = element_text(size = 14),
            #   plot.margin = margin(20, 20, 20, 20),
            #   panel.spacing = unit(1.5, "lines")
            # ) 
          # ylim(input$y_min, input$y_max)
p2

# Convert ggplot object to ggiraph
interactive_plot2 <- girafe(ggobj = p2)

# Print the interactive plot
interactive_plot2
```

```{r}
# Combine plots
combined_plot <- p / p2 

final_plot <- combined_plot + 
  plot_annotation(
    title = "Comparison of Growth Over Time",
    subtitle = "This figure shows the growth trends for oysters and clams."
    # tag_levels = 'A',
    # tag_suffix = ""
  ) &
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    plot.tag = element_text(face = "bold", size = 12, hjust = -0.1) # Customizing tag appearance
  )
```





```{r}
#| eval: false
color_palette <- wes_palette("AsteroidCity1")
shuffled_colors <- sample(color_palette)
names(shuffled_colors) <- levels(cell_growth_changes$depth)
base_size <- 18
```

```{r}
#| eval: false

line_chart <- cell_growth_changes %>%  
  ggplot(aes(x = date, y = heterotrophic_bacteria / 1e6, col = depth, data_id = depth)) +
  geom_line_interactive(linewidth = 2.5) +
  geom_point_interactive(size = 4) +
  theme_minimal(base_size = base_size) +
  facet_wrap(~ location) +
  labs(
    x = "Date",
    y = "Heterotrophic Bacteria (in millions)",
    color = "Depth",
    title = element_blank()
  ) +
  theme(
    text = element_text(
      color = 'grey20'
    ),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  
    axis.title.x = element_text(margin = margin(t = 10)),  
    axis.title.y = element_text(margin = margin(r = 10))
  ) +
  scale_x_date(
    date_labels = "%b %Y",  
    date_breaks = "1 month"    
  ) +
  scale_y_continuous(
    labels = function(x) scales::label_comma()(x * 1e6)
  ) +
  scale_color_manual(values = shuffled_colors)
line_chart

girafe(
  ggobj = line_chart,
  options = list(
    opts_hover(css = ''), ## CSS code of line we're hovering over
    opts_hover_inv(css = "opacity:0.1;"), ## CSS code of all other lines
    opts_sizing(rescale = FALSE) ## Fixes sizes to dimensions below
  ),
  height_svg = 6,
  width_svg = 9
)
```

