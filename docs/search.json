[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "",
    "text": "[Explain the purpose of this website]\n\n\n\nHow do changes in the Nomilo fishpond over time correlate with\n\n\n\n\n\n\n\nInteractive Code\n\n\n\nThroughout this document, hover over the numbered annotations to the right of code chunks to reveal detailed explanations and comments about the code. Where drop-down italicized text is present, expand by pressing on arrow to see code."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "",
    "text": "[Explain the purpose of this website]\n\n\n\nHow do changes in the Nomilo fishpond over time correlate with\n\n\n\n\n\n\n\nInteractive Code\n\n\n\nThroughout this document, hover over the numbered annotations to the right of code chunks to reveal detailed explanations and comments about the code. Where drop-down italicized text is present, expand by pressing on arrow to see code."
  },
  {
    "objectID": "index.html#install-packages",
    "href": "index.html#install-packages",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Install Packages",
    "text": "Install Packages\n\npackages &lt;- c(\"rio\", \"tidyverse\", \"janitor\", \"lubridate\", \"rmarkdown\", \"fs\", \"hms\", \"zoo\", \"corrplot\", \"kableExtra\",\n              \"psych\", \"ggplot2\")\n\n\nfor (pkg in packages) {\n  if (!requireNamespace(pkg, quietly = TRUE)) {\n    install.packages(pkg)\n  }\n}"
  },
  {
    "objectID": "index.html#load-libraries",
    "href": "index.html#load-libraries",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Load Libraries",
    "text": "Load Libraries\n\n1library(rio)\n2library(tidyverse)\n3library(janitor)\n4library(lubridate)\n5library(rmarkdown)\n6library(fs)\nlibrary(hms)\nlibrary(zoo)\nlibrary(corrplot)\nlibrary(kableExtra)\nlibrary(psych)\nlibrary(ggplot2)\n\n\n1\n\nFor importing excel data\n\n2\n\nFor cleaning of data\n\n3\n\nFor cleaning variable names\n\n4\n\nFor cleaning dates\n\n5\n\nFor displaying tables\n\n6\n\nFor file path usage"
  },
  {
    "objectID": "index.html#import-raw-data",
    "href": "index.html#import-raw-data",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Import Raw Data",
    "text": "Import Raw Data\n\nProcedure\nDefine vector of files to import:\n\n1files_to_import &lt;- dir_ls(path = \"data/raw\")\n\n2for (i in seq_along(files_to_import)) {\n  cat(i, \"= \", files_to_import[i], \"\\n\")\n}\n\n\n1\n\nStore the file paths of our raw data within the data/raw directory in files_to_import\n\n2\n\nPrint each file path with its index\n\n\n\n\n1 =  data/raw/2024-02-28_dfs.RData \n2 =  data/raw/2024-02-28_ksf-clam-growth.xlsx \n3 =  data/raw/2024-02-28_ksf-compiled-data.xlsx \n4 =  data/raw/2024-02-28_ksf-oyster-cylinder-growth.xlsx \n5 =  data/raw/2024-02-28_profile-data.xlsx \n6 =  data/raw/2024-02-28_water-samples.xlsx \n7 =  data/raw/2024-02-28_weather-data.xlsx \n8 =  data/raw/2024-03-01_dfs-no-profiles.RData \n9 =  data/raw/2024-03-01_dfs_no_profiles.RData \n10 =  data/raw/2024-03-04_dfs-no-profiles.RData \n11 =  data/raw/2024-03-08_dfs-no-profiles.RData \n\n\nUse the purrr::map() function to iteratively import files in the files_to_import vector except for the profiles data and .RData files:\n\n\n\n\n\n\n@iteratively-import-raw-data Code Chunk Execution Warning\n\n\n\nThe @iteratively-import-raw-data code chunk should only be ran once when raw data is updated because it takes long to execute. Therefore, run the @efficiently-load-raw-data code chunk instead to easily import up-to-date raw data.\n\n\n\ndfs_no_profiles &lt;- map(files_to_import[c(2:4, 6, 7)], import_list)\ncurrent_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\nsave(dfs_no_profiles, file = paste0(\"data/raw/\", current_date, \"_dfs-no-profiles.RData\"))\n\n\n\n\n\n\n\nEnsure the Correct Index Value is Inputted Below\n\n\n\nRefer to the output of the files_to_import data object to ensure you are inputting the correct index value corresponding to the file path that needs to be loaded.\n\n\nEfficiently import up-to-date raw data:\n\nload(files_to_import[10])\n\nRename datasets:\nWe will always use snakecase when naming our data objects and functions (e.g., data_object_name or function_name()).\n\nnames(dfs_no_profiles) &lt;- gsub(\"data/raw/2024-02-28_|\\\\.xlsx$|\\\\.xls$\", \"\", \n1                               files_to_import[c(2:4, 6, 7)])\n2names(dfs_no_profiles) &lt;- gsub(\"-\", \"_\", names(dfs_no_profiles))\n3names(dfs_no_profiles)\n\n\n1\n\nRemove prefixes and file extensions\n\n2\n\nReplace hyphens with underscores\n\n3\n\nCheck if names were outputted correctly\n\n\n\n\n[1] \"ksf_clam_growth\"            \"ksf_compiled_data\"         \n[3] \"ksf_oyster_cylinder_growth\" \"water_samples\"             \n[5] \"weather_data\"              \n\n\nRename each sheet within each raw dataset to be lowercased and replace spaces with underscores:\n\ndfs_no_profiles &lt;- map(dfs_no_profiles, ~ set_names(.x, gsub(\" \", \"_\", tolower(names(.x)))))\n\nCreate separate datasets by specifying the Excel sheet from each spreadsheet we want to tidy:\n\nksf_clams_growth_data &lt;- dfs_no_profiles$ksf_clam_growth$sheet1\nksf_compiled_data &lt;- dfs_no_profiles$ksf_compiled_data$full_data\nksf_oyster_cylinder_growth_data &lt;- dfs_no_profiles$ksf_oyster_cylinder_growth$sheet1\nwater_samples_data &lt;- dfs_no_profiles$water_samples$data_overview\nweather_data &lt;- dfs_no_profiles$weather_data$weather_ksf\ntidal_data &lt;- dfs_no_profiles$ksf_compiled_data$tides\n\nWe want to combine multiple sheets within the profiles Excel spreadsheet into one, therefore, we will import it separately:\n\n1sheets_to_import &lt;- c(\"L1\", \"L2\", \"L3\", \"L4\")\n\n2profiles_data &lt;- profiles_data &lt;- map_dfr(sheets_to_import, function(sheet_name) {\n  import(files_to_import[5], which = sheet_name)\n}) %&gt;%\n3  bind_rows()\n\n\n1\n\n[code annotation]\n\n2\n\n[code annotation]\n\n3\n\n[code annotation]\n\n\n\n\n\n\nView Raw Data\n\nksf_clams_growth_dataksf_compiled_dataksf_oyster_cylinder_growth_datawater_samples_dataweather_dataprofiles_datatidal_data"
  },
  {
    "objectID": "index.html#tidy-raw-data",
    "href": "index.html#tidy-raw-data",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Tidy Raw Data",
    "text": "Tidy Raw Data\n\nTidying Processes\n\nksf_clams_growth_data_tidiedksf_compiled_data_tidiedksf_oyster_cylinder_growth_data_tidiedwater_samples_data_tidiedweather_data_tidiedprofiles_data_tidiedtidal_data_tidied\n\n\n\n\nSteps to clean data\n1new_clam_var_names &lt;- c(\n  \"sort_date\", \"color\", \"clams_in_count\", \"clams_in_lbs\",  \"clams_in_avg_per_lb\",\n  \"clams_out_count\", \"clams_out_lbs\", \"clams_out_avg_per_lb\", \"growth_in_lbs\", \n  \"growth_pct\", \"sr\", \"days_btwn_sort\"\n  )\n\n2new_clam_date_col &lt;- c(\n  \"2023-10-17\", \"2023-12-06\", \"2023-12-12\", \"2024-01-02\",  \"2024-01-10\", \"2024-01-24\",\n  \"2024-01-31\", \"2024-02-08\", \"2024-02-13\"\n  )\n\nksf_clams_growth_data_tidied &lt;- ksf_clams_growth_data %&gt;%\n3  slice(-1) %&gt;%\n4  setNames(new_clam_var_names) %&gt;%\n  mutate(date = as.Date(new_clam_date_col)) %&gt;%\n  dplyr::select(-sort_date) %&gt;%\n   pivot_longer(\n    cols = c(\n      clams_in_count, clams_in_lbs, clams_in_avg_per_lb,   clams_out_count, \n      clams_out_lbs, clams_out_avg_per_lb\n      ),\n    names_to = c(\"stage\", \".value\"),\n    names_prefix = \"clams_\",\n    names_sep = \"_\",\n    values_to = \"value\"\n  ) %&gt;%\n5  mutate(stage = if_else(str_detect(stage, \"in\"), \"In\", \"Out\")) %&gt;%\n6  rename(avg_per_lbs = avg) %&gt;%\n7  mutate(across(c(color, stage), as.factor)) %&gt;%\n8  mutate(across(c(count, lbs, avg_per_lbs, growth_in_lbs, growth_pct, sr),\n                ~as.numeric(gsub(\"%\", \"\", .)))) %&gt;%\n9  arrange(date, color, stage) %&gt;%\n  dplyr::select(date, days_btwn_sort, color, stage, count, lbs, avg_per_lbs,\n                growth_in_lbs, growth_pct, sr) %&gt;%\n  rename(\"days_btwn_clams_sort\" = days_btwn_sort,\n         \"clams_color\" = color,\n         \"clams_stage\" = stage,\n         \"clams_count\" = count,\n         \"weight\" = lbs,\n         \"avg_weight\" = avg_per_lbs,\n         \"clams_growth\" = growth_in_lbs,\n         \"clams_sr\" = sr)\n         \n\npaged_table(ksf_clams_growth_data_tidied)\n\n\n\n1\n\nManually set variable names\n\n2\n\nAssign dates to new date column\n\n3\n\nDelete first row\n\n4\n\nSet date as correct variable type and pivot data set based on date range.\n\n5\n\nAssign In and Out to stage\n\n6\n\nRename variable of average to average per lbs\n\n7\n\nSet stage and color as factor variable types\n\n8\n\nSet variables as numeric variable types\n\n9\n\nArrange values by date, color, and stage\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\nksf_compiled_data_tidied &lt;- ksf_compiled_data %&gt;% \n1  rename_with(~gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)\", \"\", .x)) %&gt;%\n  janitor::clean_names() %&gt;%\n2  rename(date = date_time) %&gt;%\n  mutate(date = as.Date(date)) %&gt;%\n  filter(date &gt;= as.Date(\"2023-11-20\") & date &lt;= as.Date(\"2024-02-20\")) %&gt;%\n  arrange(date) %&gt;%\n3  dplyr::select(-c(external_voltage, wk_num, wind_dir,\n                   spadd, outdoor_temperature, hourly_rain,\n                   solar_radiation, resistivity, battery_capacity,\n                   hour, daynum, data_pt, wind_sp, diradd,\n                   wind_speed, wind_direction, tide, day, month, year)\n                ) %&gt;%\n4  dplyr::select(where(~ !anyNA(.))) %&gt;%\n5  group_by(date) %&gt;%\n  summarise(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE))) %&gt;%\n  rename(\"ksf_salinity\" = salinity,\n         \"ksf_rdo_saturation\" = rdo_saturation,\n         \"ksf_rdo_concentration\" = rdo_concentration,\n         \"ksf_actual_conductivity\" = actual_conductivity,\n         \"ksf_total_dissolved_solids\" = total_dissolved_solids,\n         \"ksf_ammonium\" = ammonium,\n         \"ksf_barometric_pressure\" = barometric_pressure,\n         \"ksf_oxygen_partial_pressure\" = oxygen_partial_pressure,\n         \"ksf_specific_conductivity\" = specific_conductivity,\n         \"ksf_density\" = density,\n         \"ksf_chlorophyll_a_fluorescence\" = chlorophyll_a_fluorescence,\n         \"ksf_ammonium_m_v\" = ammonium_m_v)\n\npaged_table(ksf_compiled_data_tidied)\n\n\n\n1\n\nClean variable names by removing everything in parentheses, using lowercase and underscores in place of spaces\n\n2\n\nRename the date_time variable to date, filter to desired date range and sort by date\n\n3\n\nRemove unnecessary variables\n\n4\n\nRemove columns with containing all NA values\n\n5\n\nGroup by date and calculate the average of every variable for each day\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\noyster_var_names &lt;- c(\n  \"date\", \"oyster_large_weight\", \"oyster_large_gain\", \"oyster_small_weight\",\n  \"oyster_small_gain\", \"oyster_chlorophyll\"\n1  )\n\nksf_oyster_cylinder_growth_data_tidied &lt;- ksf_oyster_cylinder_growth_data %&gt;% \n2  dplyr::select(c(1, 4, 5, 8, 9, 12)) %&gt;%\n  slice(-1) %&gt;%\n  setNames(oyster_var_names) %&gt;%\n3  pivot_longer(\n    cols = c(oyster_large_weight, oyster_large_gain,\n             oyster_small_gain,\n             oyster_small_weight),\n    names_to = c(\"oyster_size\", \".value\"),\n    names_prefix = \"oyster_\",\n    names_sep = \"_\",\n    values_to = \"value\"\n  ) %&gt;%\n4  mutate(oyster_size = if_else(str_detect(oyster_size, \"small\"), \"Small\", \"Large\")) %&gt;%\n5  mutate(date = as.Date(date),\n         oyster_size = as.factor(oyster_size),\n         across(c(weight, gain), as.numeric)\n        ) %&gt;%\n6  filter(date &gt;= as.Date(\"2023-11-20\") & date &lt;=\n           as.Date(\"2024-02-14\")) %&gt;%\n  mutate(weight = weight * 0.00220462) %&gt;% \n  rename(\"growth_pct\" = gain)\n\npaged_table(ksf_oyster_cylinder_growth_data_tidied)\n\n\n\n1\n\nManually set variable names\n\n2\n\nSelect desired columns and remove first row\n\n3\n\nConvert from wide to long format\n\n4\n\nCreate a new variable that differentiates oyster size\n\n5\n\nAdjust data types to numeric and factor\n\n6\n\nFilter to desired date range\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\nwater_samples_data_tidied &lt;- water_samples_data %&gt;%\n  slice(-c(44:52)) %&gt;% \n1  rename_with(~gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)\", \"\", .x)) %&gt;%\n  janitor::clean_names() %&gt;%\n2  mutate(\n    date = if_else(date == \"44074\",\n            as.character(as.Date(\"2024-01-09\")),\n            format(dmy(date), \"%Y-%m-%d\"))\n  ) %&gt;%\n3  mutate(sample_id = 1:nrow(.)) %&gt;%\n4  mutate(date = as.Date(date),\n         across(c(nomilo_id, location, round, depth), as.factor)) %&gt;%\n  select(-c(sample_id, nomilo_id, tube_name))\n\npaged_table(water_samples_data_tidied)\n\n\n\n1\n\nClean variable names by removing everything in parentheses, using lowercase and underscores in place of spaces\n\n2\n\nReplaces incorrect date values and format as YYYY-MM-DD\n\n3\n\nAdd values for sample ID\n\n4\n\nSet correct variable types\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\nweather_data_tidied &lt;- weather_data %&gt;% \n\n1janitor::clean_names() %&gt;%\n2   unite(date, year, month, day, sep = \"-\") %&gt;%\n  mutate(date = ymd(date)) %&gt;%\n3   select(-c(1, 3)) %&gt;%\n4  rename(\"outdoor_temperature\" = outdoor_temp_f) %&gt;%\n   mutate(outdoor_temperature = (outdoor_temperature - 32) * (5/9)) %&gt;%\n5  group_by(date) %&gt;%\n  summarise(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE))) %&gt;%\n6  slice(-1)\n\npaged_table(weather_data_tidied)\n\n\n\n1\n\nClean variable names\n\n2\n\nMerge separate day, month, year columns into one column variable and format as YYYY-MM-DD.\n\n3\n\nCut columns\n\n4\n\nRename outdoor temperature and convert from Fahrenheit to Celcius\n\n5\n\nGroup by date and then take average values per day\n\n6\n\nCut first row\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\n1new_profile_var_names &lt;- c(\"depth\", \"water_temperature\", \"dissolved_oxygen\", \"salinity\", \"conductivity\", \"visibility\", \"location\", \"date\")\n\n2profiles_data_tidied &lt;- profiles_data %&gt;%\n  select(-c(6, 8)) %&gt;%\n3  mutate(\n    temp_column1 = NA_character_,\n    temp_column2 = NA_character_\n  ) %&gt;%\n4  setNames(new_profile_var_names) %&gt;%\n5  mutate(\n    location = ifelse(depth == \"Location\", water_temperature, NA_character_), \n    date = ifelse(depth == \"Date\",  water_temperature, NA_character_)\n  ) %&gt;%\n6  fill(location, date, .direction = \"down\") %&gt;%\n7  filter(depth != \"Location\", depth != \"Date\") %&gt;%\n8  mutate(\n    location = case_when(\n      location == \"L1 Northwest buoy\" ~ \"back buoy\",\n      location == \"L2 Middle Buoy\" ~ \"mid buoy\",\n      location == \"L3 Production Dock\" ~ \"production dock\",\n      location == \"L4 Auwai\" ~ \"auwei\",\n      TRUE ~ location\n    ),\n    date = case_when(\n      date %in% c(\"45258\", \"2023-11-28\") ~ \"2023-11-28\",\n      date %in% c(\"45282\", \"2023-12-21\") ~ \"2023-12-21\",\n      date %in% c(\"45536\", \"2024-01-09\") ~ \"2024-01-09\",\n      date %in% c(\"30/1/24\", \"30/01/24\") ~ \"2024-01-30\",\n      date %in% c(\"20/02/24\", \"20/2/24\") ~ \"2024-02-20\",\n      TRUE ~ date\n    )) %&gt;%\n  mutate(\n    date = as.Date(date, format = \"%Y-%m-%d\"),\n9    conductivity = case_when(\n      row_number() %in% c(1:11) ~ NA_character_,\n      TRUE ~ as.character(conductivity)\n    )\n  ) %&gt;%\n10  filter(!(depth %in% c(\"Samples\", \"Depth\"))) %&gt;%\n11  mutate(date = as.Date(date),\n         across(c(depth, location), as.factor),\n         across(c(water_temperature,  dissolved_oxygen, salinity, \n                  conductivity,visibility),  as.numeric)) %&gt;%\n12   fill(visibility, .direction = \"down\") %&gt;%\n  mutate(visibility = if_else(date == \"2023-11-28\",  NA_real_, visibility))\n\npaged_table(profiles_data_tidied)\n\n\n\n1\n\nSet new variable names manually\n\n2\n\nDelete unnecessary columns\n\n3\n\nTemporarily create two new columns to replace the ones we deleted\n\n4\n\nAssign new profile variable names to rename variables in data set\n\n5\n\nTakes location from one column of location and date data, and assigns it to corresponding data of another column.\n\n6\n\nFill values of temperature downwards in newly created date and location column.\n\n7\n\nGets rid of the ‘location’ and ‘date’ rows that had empty values.\n\n8\n\nRenames values\n\n9\n\nRemoves turbidity data rows 1:11\n\n10\n\nLooks for rows containing samples and depth names and negate these values.\n\n11\n\nSets correct data types for each variable\n\n12\n\nFills values from the temperature downwards into the newly created columns for date and location\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSteps to clean data\ntidal_data_tidied &lt;- tidal_data %&gt;% \n\n1janitor::clean_names() %&gt;%\n2  mutate(date = as.Date(date, format = \"%Y-%m-%d\"))  %&gt;%\n3   filter(date &gt;= as.Date(\"2023-11-20\") & date &lt;=  as.Date(\"2024-02-20\")) %&gt;%\n4  select(-2) %&gt;%\n5  mutate(time = as_hms(format(time, \"%H:%M:%S\")),\n6         high_low = as.factor(high_low))\n  \npaged_table(tidal_data_tidied)\n\n\n\n1\n\nClean variable names\n\n2\n\nSet date as correct variable type and format YYYY-MM-DD\n\n3\n\nFilter to desired date range\n\n4\n\nCut column\n\n5\n\nSet time as time variable type\n\n6\n\nSet variable as factor type\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nMerge and Impute Tidied Datasets\n\nBiogeochemical & Physical VariablesClamsOysters\n\n\n\n# Merging\nprofiles_water_samples_merged &lt;- reduce(list(profiles_data_tidied, water_samples_data_tidied), full_join, by = c(\"date\", \"location\", \"depth\")) %&gt;% \n  relocate(date, round, location, depth, .before = water_temperature) %&gt;%\n  arrange(date) %&gt;% \n  fill(round, .direction = \"down\") %&gt;%\n  mutate(round = if_else(is.na(round), \"1\", round),\n         round = as.factor(round))\n\n\n# Complete dataset\ncompiled_weather_merged &lt;- reduce(list(ksf_compiled_data_tidied, weather_data_tidied), full_join, by = \"date\")\n\nbiogeochem_vars_merged &lt;- full_join(compiled_weather_merged, profiles_water_samples_merged)\n\n\n# Interpolating\nbiogeochem_vars_interp &lt;- biogeochem_vars_merged %&gt;% \n  # Selects numeric columns with missing values, linearly interpolates NAs by \n  # drawing straight lines between existing points, and extends the outermost \n  # values to fill NAs at the start or end\n  mutate(across(where(~is.numeric(.x) && any(is.na(.x))),\n                ~na.approx(.x, na.rm = FALSE, rule = 2)))\n\n\npaged_table(biogeochem_vars_interp)\n\n\n  \n\n\n\n\n\n\n\nClams Growth Merged with Environmental Variables\n# Merging\nclams_growth_biogeochem_vars_merged &lt;- full_join(ksf_clams_growth_data_tidied, biogeochem_vars_interp, by = \"date\")\n\n# Interpolating -- other option is to aggregate to weekly or monthly, but dates \n# are very mismatched to aggregate to monthly and dataset would be very small if \n# aggregated to monthly\nclams_growth_biogeochem_vars_interp &lt;- clams_growth_biogeochem_vars_merged %&gt;% \n mutate(across(\n    .cols = setdiff(names(.)[sapply(., function(col) is.numeric(col) &&\n                                      any(is.na(col)))], \"days_btwn_clams_sort\"),\n    .fns = ~na.approx(.x, na.rm = FALSE, rule = 2)\n  )) %&gt;%\n  relocate(date, round, location, depth, clams_color, clams_stage, .before = days_btwn_clams_sort) %&gt;% \n  arrange(date)\n\n\n\n\n\n\nOyster Growth Interpolated and Merged with Environmental Variables\noyster_growth_biogeochem_vars_merged &lt;- full_join(ksf_oyster_cylinder_growth_data_tidied, biogeochem_vars_interp, by = \"date\")\n\n# Interpolating -- other option is to aggregate to weekly or monthly, but dates \n# are very mismatched to aggregate to monthly and dataset would be very small if \n# aggregated to monthly\n\noyster_growth_biogeochem_vars_interp &lt;- oyster_growth_biogeochem_vars_merged %&gt;% \n mutate(across(where(~is.numeric(.x) && any(is.na(.x))),\n                ~na.approx(.x, na.rm = FALSE, rule = 2))) %&gt;% \n # relocate(date, round, location, depth, clams_color, clams_stage, .before = days_btwn_clams_sort) %&gt;% \n  arrange(date)"
  },
  {
    "objectID": "index.html#processed-datasets",
    "href": "index.html#processed-datasets",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Processed Datasets",
    "text": "Processed Datasets\n\nExport Tidied Datasets\nExport tidied datasets to CSV into data/tidied folder:\n\nsource(\"code/functions/export_to_csv.R\")\n\n1dfs_to_export &lt;- list(\n  ksf_clams_growth_data_tidied = ksf_clams_growth_data_tidied,\n  ksf_compiled_data_tidied = ksf_compiled_data_tidied,\n  ksf_oyster_cylinder_growth_data_tidied = ksf_oyster_cylinder_growth_data_tidied,\n  water_samples_data_tidied = water_samples_data_tidied,\n  profiles_data_tidied = profiles_data_tidied\n)\n\n2imap(dfs_to_export, ~ export_to_csv(.x, .y, \"data/tidied\"))\n\n\n1\n\nList of dataframes we want to export as CSV files\n\n2\n\nIterate the export_to_csv(df, df_name, dir_path) function over each dataframe. .x refers to the dataframe. .y refers to the name of the dataframe. These are passed to export_to_csv() function along with the desired directory path.\n\n\n\n\nExport merged final data set into data/outputs folder.\n\n\nData Dictionaries"
  },
  {
    "objectID": "index.html#exploratory-data-analysis",
    "href": "index.html#exploratory-data-analysis",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nProfiles\nHow is [salinity, dissolved oxygen, conductivity] distributed over the pond?\nGet a visual per Location of how [variable] changes with depth over time\n\n# Assuming profiles_data_tidied is your dataset\nggplot(profiles_data_tidied, aes(x = date, y = conductivity, color = as.numeric(as.character(depth)))) +\n  geom_point(size = 3, alpha = 0.8) + # Larger points with slight transparency\n  geom_line(size = 1, alpha = 0.8) + # Thicker lines with slight transparency\n  labs(x = \"Date\", y = \"Conductivity\", title = \"Conductivity Change Over Time\") +\n  theme_minimal() +\n  facet_wrap(~location) +\n  scale_color_gradient(low = \"blue\", high = \"red\", name = \"Depth\") +\n  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1),\n        axis.title.x = element_text(margin = margin(t = 10), face = \"bold\"),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        axis.title.y = element_text(face = \"bold\"),\n        legend.title = element_text(face = \"bold\")) +\n  ylim(35, 55)\n\n\n\n\n\n\n\n\nHow is [salinity, dissolved oxygen, conductivity] distributed over depth profiles?\nHow do [salinity, dissolved oxygen, conductivity] change over time for each location?"
  },
  {
    "objectID": "index.html#correlational-analysis",
    "href": "index.html#correlational-analysis",
    "title": "Nomilo Fishpond Biogoechemical Analysis",
    "section": "Correlational Analysis",
    "text": "Correlational Analysis\n\nClamsOysters\n\n\n\nAll Relationships\n\n\n\n\nKSF Clams Growth and Environmental Variables Correlation Matrix\n\n\n\nclams_count\nweight\navg_weight\nclams_growth\ngrowth_pct\nclams_sr\nksf_rdo_concentration\nksf_rdo_saturation\nksf_oxygen_partial_pressure\nksf_actual_conductivity\nksf_specific_conductivity\nksf_salinity\nksf_density\nksf_total_dissolved_solids\nksf_chlorophyll_a_fluorescence\nksf_ammonium\nksf_ammonium_m_v\nksf_barometric_pressure\noutdoor_temperature\nwind_speed_mph\nhourly_rain_inch_hr\nwind_direction\nwater_temperature\ndissolved_oxygen\nsalinity\nconductivity\nvisibility\nchlorophyll_a\nphosphate\nsilicate\nnitrate_nitrite\nammonia\nheterotrophic_bacteria\nlarge_phytoplankton\nsynechococcus_population_1\nsynechococcus_population_2\nprochlorococcus\nlysbeths_mystery_cells_events\n\n\n\n\nclams_count\n1.0000000\n0.0398812\n0.6413221\n0.3809360\n0.2061695\n0.3147388\n0.0584217\n0.0700912\n0.0697266\n0.0748247\n0.0885772\n0.0870603\n0.0903261\n0.0885773\n0.0494337\n-0.1011349\n-0.0938435\n-0.0358691\n0.0186277\n-0.0821516\n-0.0376549\n0.0922325\n0.0433019\n-0.0395026\n-0.0293743\n0.0771336\n-0.0852664\n-0.1697963\n-0.0093965\n-0.0283244\n-0.0044348\n-0.0223284\n-0.1498213\n0.0073752\n-0.1544445\n-0.1394137\n-0.1124530\n0.0241339\n\n\nweight\n0.0398812\n1.0000000\n-0.3446735\n-0.0613374\n-0.1725352\n-0.4945796\n-0.0364333\n-0.0132804\n-0.0146687\n0.0969288\n0.0685473\n0.0707241\n0.0448807\n0.0685473\n-0.0496528\n0.1101482\n0.1053677\n-0.0499828\n0.2166254\n0.0540087\n-0.0447640\n-0.1699647\n-0.0168770\n0.0829395\n-0.0423186\n-0.1006411\n-0.0244502\n0.0169301\n-0.0161802\n0.0050584\n-0.0070196\n-0.0436045\n-0.0335260\n-0.0723510\n0.0355391\n-0.0377812\n0.0089860\n-0.0638745\n\n\navg_weight\n0.6413221\n-0.3446735\n1.0000000\n0.4817160\n0.4290106\n0.4981722\n0.0769164\n0.0899008\n0.0889580\n0.0550209\n0.0570914\n0.0557861\n0.0528177\n0.0570915\n0.0278305\n-0.0910615\n-0.0801723\n-0.0265917\n-0.0478915\n-0.1311044\n-0.0256827\n0.1265750\n0.0610217\n-0.0560872\n-0.0225002\n0.0961279\n-0.0705627\n-0.1546048\n-0.0074649\n-0.0262083\n-0.0035862\n-0.0183960\n-0.1135651\n-0.0040162\n-0.1318849\n-0.0989546\n-0.1172368\n0.0123761\n\n\nclams_growth\n0.3809360\n-0.0613374\n0.4817160\n1.0000000\n0.8876048\n0.0607819\n0.0833853\n0.1181733\n0.1158914\n0.2336834\n0.2574060\n0.2536084\n0.2516654\n0.2574060\n-0.0223182\n0.0197539\n0.0106763\n0.0095434\n0.0287940\n-0.0731305\n0.0302118\n-0.0027603\n-0.0424163\n0.0512995\n0.0083841\n-0.0211477\n-0.1095873\n-0.1081871\n-0.0012633\n-0.0018627\n0.0016093\n-0.0053301\n-0.0952790\n-0.0345624\n-0.0380289\n-0.1243142\n-0.0795369\n0.0162590\n\n\ngrowth_pct\n0.2061695\n-0.1725352\n0.4290106\n0.8876048\n1.0000000\n0.1067345\n0.0589201\n0.0902050\n0.0875837\n0.1521953\n0.1404497\n0.1397074\n0.1203191\n0.1404497\n-0.0233442\n0.0430174\n0.0385213\n-0.0053368\n0.0295707\n-0.1224285\n0.0283099\n0.0144975\n-0.0189104\n0.0224537\n-0.0043322\n-0.0133456\n-0.0569544\n-0.0332062\n-0.0046792\n-0.0027671\n-0.0008727\n-0.0108429\n-0.0719245\n-0.0463402\n-0.0294968\n-0.0901188\n-0.0556430\n-0.0173553\n\n\nclams_sr\n0.3147388\n-0.4945796\n0.4981722\n0.0607819\n0.1067345\n1.0000000\n-0.0008807\n-0.0137361\n-0.0135510\n-0.1311230\n-0.1562701\n-0.1539640\n-0.1609763\n-0.1562701\n0.0177642\n-0.0892593\n-0.0793083\n0.0029991\n-0.1193300\n-0.0956572\n-0.0069658\n0.2324085\n0.1139105\n-0.0582072\n0.0015818\n0.0952742\n0.0531492\n-0.0084634\n-0.0015515\n-0.0211256\n0.0004088\n0.0159387\n-0.0298732\n0.0177201\n-0.1017130\n-0.0480826\n-0.1842235\n0.0199334\n\n\nksf_rdo_concentration\n0.0584217\n-0.0364333\n0.0769164\n0.0833853\n0.0589201\n-0.0008807\n1.0000000\n0.9768510\n0.9817279\n-0.0794431\n0.0771241\n0.0659376\n0.1712338\n0.0771241\n0.3711855\n-0.6382066\n-0.6148404\n0.4086718\n-0.2129462\n0.1605272\n-0.4634723\n0.0904208\n-0.3488062\n-0.5528962\n-0.4437449\n0.5909210\n0.1165779\n-0.0353572\n-0.0842186\n-0.1671615\n-0.0793376\n0.2098250\n-0.4628594\n0.3225801\n-0.6038017\n-0.2566040\n-0.0758379\n0.3450305\n\n\nksf_rdo_saturation\n0.0700912\n-0.0132804\n0.0899008\n0.1181733\n0.0902050\n-0.0137361\n0.9768510\n1.0000000\n0.9996613\n0.1050293\n0.2136759\n0.2057198\n0.2658573\n0.2136759\n0.2829805\n-0.5500696\n-0.5347371\n0.3672072\n-0.0947695\n0.0491942\n-0.3768297\n0.1390171\n-0.2103604\n-0.4174729\n-0.3489759\n0.4572176\n0.1624756\n-0.0557653\n-0.0735917\n-0.1538721\n-0.0621568\n0.2419570\n-0.4988466\n0.2770785\n-0.6373805\n-0.3702654\n-0.1784758\n0.3055750\n\n\nksf_oxygen_partial_pressure\n0.0697266\n-0.0146687\n0.0889580\n0.1158914\n0.0875837\n-0.0135510\n0.9817279\n0.9996613\n1.0000000\n0.0855770\n0.2005192\n0.1921378\n0.2578348\n0.2005193\n0.2968971\n-0.5628745\n-0.5467431\n0.3740758\n-0.1091256\n0.0630116\n-0.3909579\n0.1322402\n-0.2282763\n-0.4349915\n-0.3613876\n0.4745672\n0.1557466\n-0.0556747\n-0.0757372\n-0.1566096\n-0.0649004\n0.2378732\n-0.4972616\n0.2842110\n-0.6361409\n-0.3593384\n-0.1672779\n0.3126158\n\n\nksf_actual_conductivity\n0.0748247\n0.0969288\n0.0550209\n0.2336834\n0.1521953\n-0.1311230\n-0.0794431\n0.1050293\n0.0855770\n1.0000000\n0.9358731\n0.9430142\n0.8266267\n0.9358731\n-0.3537539\n0.4010893\n0.3169136\n0.0024623\n0.3777704\n-0.4973294\n0.5131152\n-0.0045048\n0.3210161\n0.7515958\n0.5422279\n-0.6987666\n-0.1272152\n-0.2779946\n0.0849027\n0.0934024\n0.0945041\n0.0518113\n-0.2617487\n-0.0842610\n-0.0894728\n-0.6695094\n-0.4707154\n0.0082038\n\n\nksf_specific_conductivity\n0.0885772\n0.0685473\n0.0570914\n0.2574060\n0.1404497\n-0.1562701\n0.0771241\n0.2136759\n0.2005192\n0.9358731\n1.0000000\n0.9997568\n0.9718706\n1.0000000\n-0.2102993\n0.2424479\n0.1443738\n0.1830143\n0.1803633\n-0.4026087\n0.4465469\n-0.1208977\n0.0351276\n0.6418740\n0.4623526\n-0.5630439\n-0.3021855\n-0.3636914\n0.0819885\n0.0752462\n0.0796385\n0.0113989\n-0.3553315\n0.0567650\n-0.1302793\n-0.7027323\n-0.4193011\n0.1780502\n\n\nksf_salinity\n0.0870603\n0.0707241\n0.0557861\n0.2536084\n0.1397074\n-0.1539640\n0.0659376\n0.2057198\n0.1921378\n0.9430142\n0.9997568\n1.0000000\n0.9667618\n0.9997568\n-0.2194537\n0.2534664\n0.1553722\n0.1745245\n0.1935923\n-0.4117255\n0.4543579\n-0.1138573\n0.0522827\n0.6531318\n0.4709705\n-0.5753299\n-0.2940434\n-0.3601777\n0.0829017\n0.0770376\n0.0812000\n0.0128782\n-0.3516008\n0.0498857\n-0.1281606\n-0.7053928\n-0.4260470\n0.1700921\n\n\nksf_density\n0.0903261\n0.0448807\n0.0528177\n0.2516654\n0.1203191\n-0.1609763\n0.1712338\n0.2658573\n0.2578348\n0.8266267\n0.9718706\n0.9667618\n1.0000000\n0.9718706\n-0.1010533\n0.1225892\n0.0216465\n0.2902552\n0.0358525\n-0.3124045\n0.3746355\n-0.1907007\n-0.1576012\n0.5274921\n0.3802908\n-0.4366715\n-0.3994594\n-0.3949827\n0.0751819\n0.0590468\n0.0648023\n-0.0180505\n-0.3906276\n0.1466780\n-0.1449227\n-0.6753004\n-0.3565399\n0.2786949\n\n\nksf_total_dissolved_solids\n0.0885773\n0.0685473\n0.0570915\n0.2574060\n0.1404497\n-0.1562701\n0.0771241\n0.2136759\n0.2005193\n0.9358731\n1.0000000\n0.9997568\n0.9718706\n1.0000000\n-0.2102993\n0.2424479\n0.1443738\n0.1830142\n0.1803633\n-0.4026088\n0.4465468\n-0.1208977\n0.0351277\n0.6418739\n0.4623526\n-0.5630438\n-0.3021854\n-0.3636914\n0.0819885\n0.0752462\n0.0796385\n0.0113989\n-0.3553316\n0.0567650\n-0.1302794\n-0.7027323\n-0.4193011\n0.1780502\n\n\nksf_chlorophyll_a_fluorescence\n0.0494337\n-0.0496528\n0.0278305\n-0.0223182\n-0.0233442\n0.0177642\n0.3711855\n0.2829805\n0.2968971\n-0.3537539\n-0.2102993\n-0.2194537\n-0.1010533\n-0.2102993\n1.0000000\n-0.8524246\n-0.8739851\n0.7781189\n-0.3532612\n0.2784529\n-0.5157410\n0.4211360\n-0.4403829\n-0.5843985\n-0.4278833\n0.6616016\n-0.2727869\n-0.4342173\n-0.1142969\n-0.1750740\n-0.0839769\n-0.1267633\n-0.3064760\n0.7316076\n-0.4545112\n-0.0468744\n-0.0786966\n0.8219408\n\n\nksf_ammonium\n-0.1011349\n0.1101482\n-0.0910615\n0.0197539\n0.0430174\n-0.0892593\n-0.6382066\n-0.5500696\n-0.5628745\n0.4010893\n0.2424479\n0.2534664\n0.1225892\n0.2424479\n-0.8524246\n1.0000000\n0.9891175\n-0.6767726\n0.4295555\n-0.2275253\n0.5734039\n-0.4849731\n0.3848555\n0.7552338\n0.5617177\n-0.8379679\n0.0694840\n0.3298470\n0.1208061\n0.2158998\n0.0927966\n-0.0451836\n0.4762623\n-0.6647693\n0.7100281\n0.1572567\n0.1426724\n-0.7089940\n\n\nksf_ammonium_m_v\n-0.0938435\n0.1053677\n-0.0801723\n0.0106763\n0.0385213\n-0.0793083\n-0.6148404\n-0.5347371\n-0.5467431\n0.3169136\n0.1443738\n0.1553722\n0.0216465\n0.1443738\n-0.8739851\n0.9891175\n1.0000000\n-0.7631377\n0.4187636\n-0.1902292\n0.5106828\n-0.4937696\n0.4113176\n0.6644244\n0.4915351\n-0.7648204\n0.1498491\n0.3984615\n0.1089918\n0.2037497\n0.0813006\n-0.0158758\n0.5079819\n-0.7220398\n0.7066173\n0.2400523\n0.2105239\n-0.7923972\n\n\nksf_barometric_pressure\n-0.0358691\n-0.0499828\n-0.0265917\n0.0095434\n-0.0053368\n0.0029991\n0.4086718\n0.3672072\n0.3740758\n0.0024623\n0.1830143\n0.1745245\n0.2902552\n0.1830142\n0.7781189\n-0.6767726\n-0.7631377\n1.0000000\n-0.2506171\n0.0663682\n-0.1766571\n0.3874687\n-0.4427633\n-0.1894874\n-0.1464554\n0.3164983\n-0.3859415\n-0.4997976\n-0.0446731\n-0.1021814\n-0.0231443\n-0.1094224\n-0.4207099\n0.7658324\n-0.4381336\n-0.3772032\n-0.3282482\n0.9270967\n\n\noutdoor_temperature\n0.0186277\n0.2166254\n-0.0478915\n0.0287940\n0.0295707\n-0.1193300\n-0.2129462\n-0.0947695\n-0.1091256\n0.3777704\n0.1803633\n0.1935923\n0.0358525\n0.1803633\n-0.3532612\n0.4295555\n0.4187636\n-0.2506171\n1.0000000\n-0.2831821\n0.1582744\n-0.0311774\n0.4069811\n0.4491685\n0.2977779\n-0.4914137\n0.1982406\n0.1101413\n0.0304546\n0.0542528\n0.0365526\n0.0479026\n0.0205206\n-0.2333797\n0.0609023\n-0.2208879\n-0.1542437\n-0.2543358\n\n\nwind_speed_mph\n-0.0821516\n0.0540087\n-0.1311044\n-0.0731305\n-0.1224285\n-0.0956572\n0.1605272\n0.0491942\n0.0630116\n-0.4973294\n-0.4026087\n-0.4117255\n-0.3124045\n-0.4026088\n0.2784529\n-0.2275253\n-0.1902292\n0.0663682\n-0.2831821\n1.0000000\n-0.4548750\n-0.0863171\n-0.3232688\n-0.4358076\n-0.3466817\n0.4240445\n-0.1065476\n0.0865922\n-0.0768496\n-0.0620570\n-0.0828294\n-0.1369645\n0.2928140\n0.0641210\n0.2429762\n0.5130586\n0.3649632\n0.0930453\n\n\nhourly_rain_inch_hr\n-0.0376549\n-0.0447640\n-0.0256827\n0.0302118\n0.0283099\n-0.0069658\n-0.4634723\n-0.3768297\n-0.3909579\n0.5131152\n0.4465469\n0.4543579\n0.3746355\n0.4465468\n-0.5157410\n0.5734039\n0.5106828\n-0.1766571\n0.1582744\n-0.4548750\n1.0000000\n0.0311026\n0.3355489\n0.7530197\n0.6359783\n-0.7350940\n-0.0975236\n0.0029483\n0.1755384\n0.2177999\n0.1604358\n-0.0183225\n0.1115593\n-0.1991269\n0.2986392\n-0.2352783\n-0.2128000\n-0.1943953\n\n\nwind_direction\n0.0922325\n-0.1699647\n0.1265750\n-0.0027603\n0.0144975\n0.2324085\n0.0904208\n0.1390171\n0.1322402\n-0.0045048\n-0.1208977\n-0.1138573\n-0.1907007\n-0.1208977\n0.4211360\n-0.4849731\n-0.4937696\n0.3874687\n-0.0311774\n-0.0863171\n0.0311026\n1.0000000\n0.4096215\n-0.1138497\n-0.0430522\n0.2103379\n0.1795951\n-0.2832700\n-0.0248731\n-0.0751173\n0.0263500\n0.0917063\n-0.2306360\n0.3973185\n-0.5094121\n-0.2529488\n-0.5218398\n0.4406428\n\n\nwater_temperature\n0.0433019\n-0.0168770\n0.0610217\n-0.0424163\n-0.0189104\n0.1139105\n-0.3488062\n-0.2103604\n-0.2282763\n0.3210161\n0.0351276\n0.0522827\n-0.1576012\n0.0351277\n-0.4403829\n0.3848555\n0.4113176\n-0.4427633\n0.4069811\n-0.3232688\n0.3355489\n0.4096215\n1.0000000\n0.3981645\n0.4387957\n-0.4467029\n0.5010942\n0.1432008\n0.0045130\n0.0118424\n0.0244368\n0.1616940\n0.1593846\n-0.4073963\n-0.0051252\n-0.1224956\n-0.3392588\n-0.4437034\n\n\ndissolved_oxygen\n-0.0395026\n0.0829395\n-0.0560872\n0.0512995\n0.0224537\n-0.0582072\n-0.5528962\n-0.4174729\n-0.4349915\n0.7515958\n0.6418740\n0.6531318\n0.5274921\n0.6418739\n-0.5843985\n0.7552338\n0.6644244\n-0.1894874\n0.4491685\n-0.4358076\n0.7530197\n-0.1138497\n0.3981645\n1.0000000\n0.7599445\n-0.9569033\n-0.1710752\n-0.1040147\n0.1389037\n0.1953947\n0.1287053\n-0.0888671\n0.1245901\n-0.2750532\n0.3825849\n-0.3677567\n-0.3604904\n-0.1957251\n\n\nsalinity\n-0.0293743\n-0.0423186\n-0.0225002\n0.0083841\n-0.0043322\n0.0015818\n-0.4437449\n-0.3489759\n-0.3613876\n0.5422279\n0.4623526\n0.4709705\n0.3802908\n0.4623526\n-0.4278833\n0.5617177\n0.4915351\n-0.1464554\n0.2977779\n-0.3466817\n0.6359783\n-0.0430522\n0.4387957\n0.7599445\n1.0000000\n-0.7485262\n-0.0953113\n-0.1205943\n0.0038710\n0.0260171\n-0.0283800\n-0.0903831\n0.3384792\n-0.2371223\n0.3970020\n-0.2417973\n-0.2423270\n-0.1078567\n\n\nconductivity\n0.0771336\n-0.1006411\n0.0961279\n-0.0211477\n-0.0133456\n0.0952742\n0.5909210\n0.4572176\n0.4745672\n-0.6987666\n-0.5630439\n-0.5753299\n-0.4366715\n-0.5630438\n0.6616016\n-0.8379679\n-0.7648204\n0.3164983\n-0.4914137\n0.4240445\n-0.7350940\n0.2103379\n-0.4467029\n-0.9569033\n-0.7485262\n1.0000000\n0.0512267\n-0.0862920\n-0.1299376\n-0.1956887\n-0.1130600\n0.0393508\n-0.2022605\n0.3714313\n-0.4533136\n0.2818507\n0.2137544\n0.3414265\n\n\nvisibility\n-0.0852664\n-0.0244502\n-0.0705627\n-0.1095873\n-0.0569544\n0.0531492\n0.1165779\n0.1624756\n0.1557466\n-0.1272152\n-0.3021855\n-0.2940434\n-0.3994594\n-0.3021854\n-0.2727869\n0.0694840\n0.1498491\n-0.3859415\n0.1982406\n-0.1065476\n-0.0975236\n0.1795951\n0.5010942\n-0.1710752\n-0.0953113\n0.0512267\n1.0000000\n0.6349338\n-0.0190817\n-0.0331949\n-0.0139576\n0.4193747\n0.1259908\n-0.3038804\n-0.1688299\n0.0899420\n0.0073425\n-0.4700867\n\n\nchlorophyll_a\n-0.1697963\n0.0169301\n-0.1546048\n-0.1081871\n-0.0332062\n-0.0084634\n-0.0353572\n-0.0557653\n-0.0556747\n-0.2779946\n-0.3636914\n-0.3601777\n-0.3949827\n-0.3636914\n-0.4342173\n0.3298470\n0.3984615\n-0.4997976\n0.1101413\n0.0865922\n0.0029483\n-0.2832700\n0.1432008\n-0.1040147\n-0.1205943\n-0.0862920\n0.6349338\n1.0000000\n0.0027573\n0.0342378\n-0.0253610\n0.2306358\n0.2976274\n-0.4167574\n0.2514232\n0.3060397\n0.2721857\n-0.5912902\n\n\nphosphate\n-0.0093965\n-0.0161802\n-0.0074649\n-0.0012633\n-0.0046792\n-0.0015515\n-0.0842186\n-0.0735917\n-0.0757372\n0.0849027\n0.0819885\n0.0829017\n0.0751819\n0.0819885\n-0.1142969\n0.1208061\n0.1089918\n-0.0446731\n0.0304546\n-0.0768496\n0.1755384\n-0.0248731\n0.0045130\n0.1389037\n0.0038710\n-0.1299376\n-0.0190817\n0.0027573\n1.0000000\n0.9870777\n0.9896350\n0.4195080\n-0.2561840\n0.4682867\n-0.0803333\n-0.0588001\n0.0134633\n-0.0953887\n\n\nsilicate\n-0.0283244\n0.0050584\n-0.0262083\n-0.0018627\n-0.0027671\n-0.0211256\n-0.1671615\n-0.1538721\n-0.1566096\n0.0934024\n0.0752462\n0.0770376\n0.0590468\n0.0752462\n-0.1750740\n0.2158998\n0.2037497\n-0.1021814\n0.0542528\n-0.0620570\n0.2177999\n-0.0751173\n0.0118424\n0.1953947\n0.0260171\n-0.1956887\n-0.0331949\n0.0342378\n0.9870777\n1.0000000\n0.9872636\n0.3547882\n-0.1812854\n0.4060742\n0.0241769\n0.0024204\n0.0583111\n-0.1543621\n\n\nnitrate_nitrite\n-0.0044348\n-0.0070196\n-0.0035862\n0.0016093\n-0.0008727\n0.0004088\n-0.0793376\n-0.0621568\n-0.0649004\n0.0945041\n0.0796385\n0.0812000\n0.0648023\n0.0796385\n-0.0839769\n0.0927966\n0.0813006\n-0.0231443\n0.0365526\n-0.0828294\n0.1604358\n0.0263500\n0.0244368\n0.1287053\n-0.0283800\n-0.1130600\n-0.0139576\n-0.0253610\n0.9896350\n0.9872636\n1.0000000\n0.3695611\n-0.2918132\n0.4922368\n-0.1211689\n-0.0774211\n-0.0204213\n-0.0722751\n\n\nammonia\n-0.0223284\n-0.0436045\n-0.0183960\n-0.0053301\n-0.0108429\n0.0159387\n0.2098250\n0.2419570\n0.2378732\n0.0518113\n0.0113989\n0.0128782\n-0.0180505\n0.0113989\n-0.1267633\n-0.0451836\n-0.0158758\n-0.1094224\n0.0479026\n-0.1369645\n-0.0183225\n0.0917063\n0.1616940\n-0.0888671\n-0.0903831\n0.0393508\n0.4193747\n0.2306358\n0.4195080\n0.3547882\n0.3695611\n1.0000000\n-0.1392196\n0.0949586\n-0.3284394\n-0.1392160\n-0.0104957\n-0.1959774\n\n\nheterotrophic_bacteria\n-0.1498213\n-0.0335260\n-0.1135651\n-0.0952790\n-0.0719245\n-0.0298732\n-0.4628594\n-0.4988466\n-0.4972616\n-0.2617487\n-0.3553315\n-0.3516008\n-0.3906276\n-0.3553316\n-0.3064760\n0.4762623\n0.5079819\n-0.4207099\n0.0205206\n0.2928140\n0.1115593\n-0.2306360\n0.1593846\n0.1245901\n0.3384792\n-0.2022605\n0.1259908\n0.2976274\n-0.2561840\n-0.1812854\n-0.2918132\n-0.1392196\n1.0000000\n-0.4844781\n0.8138114\n0.7032851\n0.4602386\n-0.3777886\n\n\nlarge_phytoplankton\n0.0073752\n-0.0723510\n-0.0040162\n-0.0345624\n-0.0463402\n0.0177201\n0.3225801\n0.2770785\n0.2842110\n-0.0842610\n0.0567650\n0.0498857\n0.1466780\n0.0567650\n0.7316076\n-0.6647693\n-0.7220398\n0.7658324\n-0.2333797\n0.0641210\n-0.1991269\n0.3973185\n-0.4073963\n-0.2750532\n-0.2371223\n0.3714313\n-0.3038804\n-0.4167574\n0.4682867\n0.4060742\n0.4922368\n0.0949586\n-0.4844781\n1.0000000\n-0.4944893\n-0.2744112\n-0.1899288\n0.7822357\n\n\nsynechococcus_population_1\n-0.1544445\n0.0355391\n-0.1318849\n-0.0380289\n-0.0294968\n-0.1017130\n-0.6038017\n-0.6373805\n-0.6361409\n-0.0894728\n-0.1302793\n-0.1281606\n-0.1449227\n-0.1302794\n-0.4545112\n0.7100281\n0.7066173\n-0.4381336\n0.0609023\n0.2429762\n0.2986392\n-0.5094121\n-0.0051252\n0.3825849\n0.3970020\n-0.4533136\n-0.1688299\n0.2514232\n-0.0803333\n0.0241769\n-0.1211689\n-0.3284394\n0.8138114\n-0.4944893\n1.0000000\n0.6189665\n0.4730559\n-0.4077976\n\n\nsynechococcus_population_2\n-0.1394137\n-0.0377812\n-0.0989546\n-0.1243142\n-0.0901188\n-0.0480826\n-0.2566040\n-0.3702654\n-0.3593384\n-0.6695094\n-0.7027323\n-0.7053928\n-0.6753004\n-0.7027323\n-0.0468744\n0.1572567\n0.2400523\n-0.3772032\n-0.2208879\n0.5130586\n-0.2352783\n-0.2529488\n-0.1224956\n-0.3677567\n-0.2417973\n0.2818507\n0.0899420\n0.3060397\n-0.0588001\n0.0024204\n-0.0774211\n-0.1392160\n0.7032851\n-0.2744112\n0.6189665\n1.0000000\n0.7684251\n-0.3703005\n\n\nprochlorococcus\n-0.1124530\n0.0089860\n-0.1172368\n-0.0795369\n-0.0556430\n-0.1842235\n-0.0758379\n-0.1784758\n-0.1672779\n-0.4707154\n-0.4193011\n-0.4260470\n-0.3565399\n-0.4193011\n-0.0786966\n0.1426724\n0.2105239\n-0.3282482\n-0.1542437\n0.3649632\n-0.2128000\n-0.5218398\n-0.3392588\n-0.3604904\n-0.2423270\n0.2137544\n0.0073425\n0.2721857\n0.0134633\n0.0583111\n-0.0204213\n-0.0104957\n0.4602386\n-0.1899288\n0.4730559\n0.7684251\n1.0000000\n-0.3649514\n\n\nlysbeths_mystery_cells_events\n0.0241339\n-0.0638745\n0.0123761\n0.0162590\n-0.0173553\n0.0199334\n0.3450305\n0.3055750\n0.3126158\n0.0082038\n0.1780502\n0.1700921\n0.2786949\n0.1780502\n0.8219408\n-0.7089940\n-0.7923972\n0.9270967\n-0.2543358\n0.0930453\n-0.1943953\n0.4406428\n-0.4437034\n-0.1957251\n-0.1078567\n0.3414265\n-0.4700867\n-0.5912902\n-0.0953887\n-0.1543621\n-0.0722751\n-0.1959774\n-0.3777886\n0.7822357\n-0.4077976\n-0.3703005\n-0.3649514\n1.0000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecific Relationship\n\n\nCorrelation Between Interpolated Weight and Interpolated Dissolved Oxygen\nresults &lt;- corr.test(x = clams_growth_biogeochem_vars_interp$clams_count, \n                     y = clams_growth_biogeochem_vars_interp$dissolved_oxygen,\n                     method = \"pearson\", ci = TRUE)\n\nprint(results, short=FALSE)\n\n\nCall:corr.test(x = clams_growth_biogeochem_vars_interp$clams_count, \n    y = clams_growth_biogeochem_vars_interp$dissolved_oxygen, \n    method = \"pearson\", ci = TRUE)\nCorrelation matrix \n[1] -0.04\nSample Size \n[1] 256\nThese are the unadjusted probability values.\n  The probability values  adjusted for multiple tests are in the p.adj object. \n[1] 0.53\n\n Confidence intervals based upon normal theory.  To get bootstrapped values, try cor.ci\n      raw.lower raw.r raw.upper raw.p lower.adj upper.adj\nNA-NA     -0.16 -0.04      0.08  0.53     -0.16      0.08\n\n\n\n\nAdjusted P-Value\nadjusted_p_values &lt;- results$p.adj\nprint(adjusted_p_values)\n\n\n[1] 0.5292223\n\n\n\n\n\n\nAll Relationships\n\n\nSpecific Relationship"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Nomilo Fishpond Biogeochemical Analysis",
    "section": "",
    "text": "Creative Commons Legal Code\nCC0 1.0 Universal\nCREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\nLEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\nATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\nINFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\nREGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\nPROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\nTHE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\nHEREUNDER.\nStatement of Purpose\nThe laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an “owner”) of an original work of authorship and/or a database (each, a “Work”).\nCertain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (“Commons”) that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.\nFor these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the “Affirmer”), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.\n\nCopyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (“Copyright and Related Rights”). Copyright and Related Rights include, but are not limited to, the following:\n\n\nthe right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;\nmoral rights retained by the original author(s) and/or performer(s);\npublicity and privacy rights pertaining to a person’s image or likeness depicted in a Work;\nrights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;\nrights protecting the extraction, dissemination, use and reuse of data in a Work;\ndatabase rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and\nother similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.\n\n\nWaiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer’s heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer’s express Statement of Purpose.\nPublic License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “License”). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer’s express Statement of Purpose.\nLimitations and Disclaimers.\n\n\nNo trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.\nAffirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.\nAffirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person’s Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.\nAffirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "fieldwork-templates.html",
    "href": "fieldwork-templates.html",
    "title": "Fieldwork Templates",
    "section": "",
    "text": "Back to top"
  }
]