[{"name":"app.R","content":"list_tidied_data_file_paths <- function() {\r\n  # Dynamically list file paths\r\n  file_paths <- fs::dir_ls(here::here(\"data/output\"))\r\n  return(file_paths)\r\n}\r\n\r\ncreate_user_friendly_names <- function(file_paths) {\r\n  # Function to map file paths to user-friendly names\r\n  get_user_friendly_name <- function(file_path) {\r\n    # Extract the date from the file path\r\n    date <- stringr::str_extract(file_path, \"\\\\d{4}-\\\\d{2}-\\\\d{2}\")\r\n    # Format the date into MM-DD-YYYY\r\n    formatted_date <- format(as.Date(date), \"%m-%d-%Y\")\r\n    \r\n    # Extract the data type from the file name, converting dashes to spaces and capitalizing words\r\n    data_type <- stringr::str_extract(file_path, \"(?<=2024-\\\\d{2}-\\\\d{2}_).*(?=-data-tidied\\\\.csv)\")\r\n    data_type_clean <- stringr::str_replace_all(data_type, \"-\", \" \")\r\n    data_type_clean <- tools::toTitleCase(data_type_clean)\r\n    \r\n    # Combine the cleaned data type and formatted date\r\n    user_friendly_name <- paste(data_type_clean, formatted_date)\r\n    return(user_friendly_name)\r\n  }\r\n  \r\n  # Apply the naming function and create a choices vector\r\n  choices_vector <- setNames(object = file_paths, nm = sapply(file_paths, get_user_friendly_name))\r\n  return(choices_vector)\r\n}\r\n\r\n# Helper function to convert variable names to title case with spaces\r\nmake_title_case <- function(variable_name) {\r\n  stringr::str_to_title(stringr::str_replace_all(variable_name, pattern = \"_\", replacement = \" \"))\r\n}\r\n\r\ngenerate_static_plot <- function(df, y_var, y_var_title, y_min, y_max) {\r\n  p <- ggplot(df, aes(x = date, y = !!rlang::sym(y_var), color = as.factor(depth))) +\r\n    geom_point(size = 1.5, alpha = 0.8) +\r\n    geom_line(linewidth = 1, alpha = 0.6) +\r\n    facet_wrap(~ location) +\r\n    labs(color = \"Depth\", x = \"Month\", y = y_var_title, title = paste(y_var_title, \"Over Time by Location and Depth\")) +\r\n    scale_color_viridis_d() +\r\n    theme_minimal() +\r\n    theme(\r\n      axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1, size = 14),\r\n      axis.text.y = element_text(margin = margin(r = 10), size = 14),\r\n      axis.title.x = element_text(margin = margin(t = 10), face = \"bold\", size = 18),\r\n      axis.title.y = element_text(face = \"bold\", margin = margin(r = 10), size = 18), \r\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 22),\r\n      legend.position = \"bottom\", \r\n      legend.title = element_text(face = \"bold\", size = 14),\r\n      legend.text = element_text(size = 14), \r\n      strip.text = element_text(size = 16),\r\n      plot.margin = margin(20, 20, 20, 20),\r\n      panel.spacing = unit(2, \"lines\")\r\n    ) +\r\n    guides(color = guide_legend(override.aes = list(size=4))) +\r\n    ylim(y_min, y_max)\r\n  return(p)\r\n}\r\n\r\ngenerate_interactive_plot <- function(df, y_var, y_var_title, y_min, y_max) {\r\n  df <- df %>% arrange(location, date)\r\n  \r\n  p <- ggplot(df, aes(x = date, y = !!rlang::sym(y_var), group = interaction(location, depth), color = as.factor(depth), text = paste(y_var_title, \":\", !!rlang::sym(y_var)))) +\r\n    geom_point(size = 1.5, alpha = 0.8) +\r\n    geom_line(size = 1, alpha = 0.6) +\r\n    facet_wrap(~ location) +\r\n    labs(color = \"Depth\", x = \"Month\", y = y_var_title, title = paste(y_var_title, \"Over Time by Location and Depth\")) +\r\n    scale_color_viridis_d() +\r\n    theme_minimal(base_size = 12) +\r\n    theme(\r\n      axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1), \r\n      axis.title.x = element_text(margin = margin(t = 10), face = \"bold\"), \r\n      axis.title.y = element_text(face = \"bold\", margin = margin(l = 15)), \r\n      plot.title = element_text(hjust = 0.5, face = \"bold\"),\r\n      legend.position = \"bottom\", \r\n      legend.title = element_text(face = \"bold\"),\r\n      legend.text = element_text(size = 15),\r\n      strip.text = element_text(size = 12),\r\n      plot.margin = margin(20, 20, 20, 20)\r\n    ) +\r\n    ylim(as.numeric(y_min), as.numeric(y_max))\r\n  \r\n  interactive_plot <- ggplotly(p, tooltip = \"text\") %>%\r\n    layout(\r\n      yaxis = list(range = c(as.numeric(y_min), as.numeric(y_max))),\r\n      legend = list(\r\n        orientation = 'h', \r\n        x = 0.5, \r\n        xanchor = 'center', \r\n        y = -0.3,\r\n        font = list(size = 12)\r\n      ), \r\n      margin = list(l = 50, r = 50, b = 100, t = 80) \r\n    ) %>%\r\n    config(responsive = TRUE) \r\n  \r\n  return(interactive_plot)\r\n}\r\n\r\nui <- fluidPage(\r\n  titlePanel(\r\n    title = div(\r\n      style = \"font-weight: bold; text-align: center; margin-bottom: 20px;\",\r\n      \"Exploring Depth-wise Biogeochemical Variations Across Nomilo Fishpond Locations Over Time\"\r\n    )\r\n  ),\r\n  # Center the input selectors\r\n  fluidRow(\r\n    column(width = 3, offset = 3, selectInput(\"dataset\", \"Choose Dataset:\", choices = c(\"Select Dataset\" = \"\"))),\r\n    column(width = 3, uiOutput(\"y_var_ui\"))\r\n  ),\r\n  fluidRow(\r\n    column(width = 3, offset = 3, numericInput(\"y_min\", \"Y-axis Minimum:\", value = 0)),\r\n    column(width = 3, numericInput(\"y_max\", \"Y-axis Maximum:\", value = 100))\r\n  ),\r\n  # Conditional message and plot display\r\n  uiOutput(\"plot_ui\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  # Reactive value to store the mapping of user-friendly names to file paths\r\n  names_to_paths <- reactiveVal(list())\r\n  \r\n  observe({\r\n    file_paths <- list_tidied_data_file_paths()\r\n    choices_vector <- create_user_friendly_names(file_paths)\r\n    names_to_paths(choices_vector)\r\n    updateSelectInput(session, \"dataset\", choices = c(\"Select Dataset\" = \"\", names(choices_vector)))\r\n  })\r\n  \r\n  output$y_var_ui <- renderUI({\r\n    if (input$dataset == \"\" || is.null(input$dataset)) {\r\n      return(selectInput(\"y_var\", \"Choose Y Variable:\", choices = c(\"Select Y Variable\" = \"\")))\r\n    }\r\n    \r\n    tryCatch({\r\n      df <- readr::read_csv(names_to_paths()[input$dataset])\r\n      num_vars <- df %>% dplyr::select_if(is.numeric) %>% names()\r\n      selectInput(\"y_var\", \"Choose Y Variable:\", choices = c(\"Select Y Variable\" = \"\", num_vars))\r\n    }, error = function(e) {\r\n      return(h5(\"Error reading dataset. Please check the dataset or try another.\"))\r\n    })\r\n  })\r\n  \r\n  output$staticplot <- renderPlot({\r\n    req(input$dataset, input$y_var)\r\n    df <- readr::read_csv(names_to_paths()[input$dataset])\r\n    formatted_title <- make_title_case(input$y_var)\r\n    generate_static_plot(df, input$y_var, formatted_title, input$y_min, input$y_max)\r\n  })\r\n  \r\n  output$interactiveplot <- renderPlotly({\r\n    req(input$dataset, input$y_var)\r\n    df <- readr::read_csv(names_to_paths()[input$dataset])\r\n    formatted_title <- make_title_case(input$y_var)\r\n    generate_interactive_plot(df, input$y_var, formatted_title, input$y_min, input$y_max)\r\n  })\r\n  \r\n  output$plot_ui <- renderUI({\r\n    # If the dataset or y variable is not selected, show the message\r\n    if (is.null(input$dataset) || input$dataset == \"\" || is.null(input$y_var) || input$y_var == \"\") {\r\n      wellPanel(h4(\"Please select a dataset and a variable to display the plots.\"), style = \"text-align:center;\")\r\n    } else {\r\n      # If selected, show the tabs with the plots\r\n      tabsetPanel(\r\n        tabPanel(\"Static\", plotOutput(\"staticplot\")),\r\n        tabPanel(\"Interactive\", plotlyOutput(\"interactiveplot\"))\r\n      )\r\n    }\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)","type":"text"},{"name":"clams.R","content":"ksf_clam_growth_data <- dfs$ksf_clam_growth$sheet1\r\n\r\n#### ksf_clam_growth_data\r\n\r\n```{r}\r\n#| eval: false\r\n#| echo: false\r\nnew_var_names <- c(\"sort_date\", \"color\", \"clams_in_count\", \"clams_in_lbs\", \"clams_in_avg_per_lb\",\r\n                   \"clams_out_count\", \"clams_out_lbs\", \"clams_out_avg_per_lb\", \"growth_in_lbs\",\r\n                   \"growth_pct\", \"sr\", \"days_btwn_sort\")\r\n\r\nksf_clam_growth_data_tidied <- ksf_clam_growth_data %>%\r\n  slice(-1) %>%\r\n  setNames(new_var_names) %>%\r\n  pivot_longer(\r\n    cols = c(clams_in_count, clams_in_lbs, clams_in_avg_per_lb,\r\n             clams_out_count, clams_out_lbs, clams_out_avg_per_lb),\r\n    names_to = c(\"stage\", \".value\"),\r\n    names_prefix = \"clams_\", \r\n    names_sep = \"_\", \r\n    values_to = \"value\"\r\n  ) %>%\r\n  mutate(stage = if_else(str_detect(stage, \"in\"), \"In\", \"Out\")) %>%\r\n  rename(avg_per_lbs = avg) %>% \r\n  mutate(across(c(color, stage), as.factor)) %>%\r\n  mutate(across(c(count, lbs, avg_per_lbs, growth_in_lbs, growth_pct, sr), ~as.numeric(gsub(\"[^0-9.-]\", \"\", .)))) %>% \r\n  arrange(sort_date, color, stage) %>% \r\n  dplyr::select(sort_date, days_btwn_sort, color, stage, count, lbs, avg_per_lbs, \r\n                growth_in_lbs, growth_pct, sr)\r\n```\r\n\r\n```{r}\r\n#| label: tidy-ksf-clam-growth-data-dataset\r\n#| code-fold: true\r\n#| code-summary: <i>Steps to clean data<\/i>\r\nksf_clam_growth_data_tidied <- ksf_clam_growth_data\r\n\r\npaged_table(ksf_clam_growth_data_tidied)\r\n```\r\n\r\n","type":"text"},{"name":"export-shinylive.R","content":"shinylive::export(\r\n  appdir = \"code\",\r\n  destdir = \"docs\"\r\n)\r\n\r\nhttpuv::runStaticServer(\r\n  dir = \"docs\",\r\n  port = 8888\r\n)","type":"text"},{"name":"functions/export_to_csv.R","content":"export_to_csv <- function(df, df_name, dir_path) {\r\n  current_date <- format(Sys.Date(), \"%Y-%m-%d\")\r\n  file_name <- gsub(\"_\", \"-\", df_name)\r\n  full_file_path <- paste0(dir_path, \"/\", current_date, \"_\", file_name, \".csv\")\r\n  write.csv(df, full_file_path, row.names = FALSE)\r\n  message(\"Exported file to \", full_file_path)\r\n}\r\n","type":"text"}]
