---
title: "Nomilo Fishpond Biogoechemical Analysis"
execute: 
  warning: false
  messages: false
  echo: fenced
code-annotations: hover
code-overflow: wrap
format: 
  html:
    toc-title: "Data Analysis Workflow:"
    toc-location: left

---

::: {.callout title="Interactive Code"}
Throughout this document, hover over the numbered annotations to the right of code chunks to reveal detailed explanations and comments about the code. Where drop-down *italicized* text is present, expand by pressing
on arrow to see code.
:::

## Install Packages

```{r}
#| label: install-packages
#| eval: false
install.packages(c("rio", "tidyverse", "janitor", "lubridate", "rmarkdown"))
```

## Load Libraries

```{r}
#| label: load-libraries

library(rio) # <1>
library(tidyverse) # <2>
library(janitor) # <3>
library(lubridate) # <4>
library(rmarkdown) # <5>
```

1. For importing excel data
2. For cleaning of data 
3. For cleaning variable names
4. For cleaning dates
5. For displaying tables

## Get Raw Data File Names

```{bash}
#| label: get-raw-data-file-names
cd "data/raw" # <1>
ls # <2> 
```

1. Change directory to "data/raw"
2. List files within directory 

## Import Raw Data

Define vector of files to import by copying and pasting file names from above: 

```{r}
#| label: create-vector-file-paths
files_to_import <- c(
  "data/raw/2024-02-28_ksf-clam-growth.xlsx",
  "data/raw/2024-02-28_ksf-compiled-data.xlsx",
  "data/raw/2024-02-28_ksf-oyster-cylinder-growth.xlsx",
  "data/raw/2024-02-28_profile-data.xlsx",
  "data/raw/2024-02-28_water-samples.xlsx",
  "data/raw/2024-02-28_weather-data.xlsx"
)
```

Use the `purrr::map()` function to iteratively import all files in the `files_to_import` vector: 

```{r}
#| label: iteratively-import-raw-data
#| messages: false
#| warnings: false
#| eval: false
dfs <- map(files_to_import, import_list) # <1>
save(dfs, file = "data/raw/dfs.RData") # <1>
```

1. It takes a while to import these dataframes, so we're going to only import
it once and then export it as a .RData file to load it back in more efficiently

Efficiently load import raw data:

```{r}
#| label: efficiently-load-raw-data
load("data/raw/dfs.RData")
```

Rename datasets:

We will always use snakecase when naming our data objects and functions (e.g., `data_object_name` or `function_name()`).

```{r}
#| label: rename-raw-datasets
names(dfs) <- gsub("data/raw/2024-02-28_|\\.xlsx$|\\.xls$", "", files_to_import) # <1>
names(dfs) <- gsub("-", "_", names(dfs)) # <2>
names(dfs) # <3>
```

1. Remove prefixes and file extensions
2. Replace hyphens with underscores
3. Check if names were outputted correctly

Rename each sheet within each raw dataset to be lowercased and replace spaces with underscores:

```{r}
#| label: rename-sheets-within-each-raw-dataset
dfs <- map(dfs, ~ set_names(.x, gsub(" ", "_", tolower(names(.x)))))
```

## Tidy Raw Data

### Create Separate Datasets

```{r}
#| label: create-separate-datasets
ksf_clam_growth_data <- dfs$ksf_clam_growth$sheet1
ksf_compiled_data <- dfs$ksf_compiled_data$full_data
ksf_oyster_cylinder_growth_data <- dfs$ksf_oyster_cylinder_growth$sheet1
profile_data <- dfs$profile_data$final_data
water_samples_data <- dfs$water_samples$data_overview
weather_data <- dfs$weather_data$weather_ksf
```

### Tidying Processes

::: {.panel-tabset}



#### ksf_compiled_data

```{r}
#| label: tidy-ksf-compiled-data-dataset
#| code-fold: true
#| code-summary: <i>Steps to clean data</i>
ksf_compiled_data_tidied <- ksf_compiled_data %>% 
  rename_with(~gsub("\\s*\\([^\\)]+\\)", "", .x)) %>% # <1>
  janitor::clean_names() %>% # <1>
  rename(date = date_time) %>%  # <2>
  mutate(date = as.Date(date)) %>% # <2>
  filter(date >= as.Date("2023-11-20") & date <= as.Date("2024-02-20")) %>% # <2>
  arrange(date) %>%  # <2>
  dplyr::select(-c(external_voltage, wk_num, wind_dir, # <3>
                   spadd, outdoor_temperature, hourly_rain, # <3>
                   solar_radiation, resistivity, battery_capacity, # <3>
                   hour, daynum, data_pt, wind_sp, diradd, # <3>
                   wind_speed, wind_direction, tide, day, month, year) # <3>
                ) %>% # <3>
  dplyr::select(where(~ !anyNA(.))) %>%  # <4>
  group_by(date) %>% # <5>
  summarise(across(where(is.numeric), \(x) mean(x, na.rm = TRUE))) # <5>

paged_table(ksf_compiled_data_tidied)
```

1. Clean variable names by removing everything in parentheses, using lowercase 
and underscores in place of spaces
2. Rename the `date_time` variable to `date`, filter to desired date range and 
sort by `date`
3. Remove unnecessary variables
4. Remove columns with containing all NA values
5. Group by `date` and calculate the average of every variable for each day

#### ksf_oyster_cylinder_growth_data

```{r}
#| label: tidy-ksf-oyster-cylinder-growth-data-dataset
#| code-fold: true
#| code-summary: <i>Steps to clean data</i>

ksf_oyster_cylinder_growth_data_tidied <- ksf_oyster_cylinder_growth_data

paged_table(ksf_oyster_cylinder_growth_data_tidied)
```

#### profile_data

```{r}
#| label: tidy-profile-data-dataset
#| code-fold: true
#| code-summary: <i>Steps to clean data</i>
profile_data_tidied <- profile_data

paged_table(profile_data_tidied)
```

#### water_samples_data

```{r}
#| label: tidy-water-samples-data-dataset
#| code-fold: true
#| code-summary: <i>Steps to clean data</i>
water_samples_data_tidied <- water_samples_data

paged_table(water_samples_data_tidied)
```

#### weather_data

```{r}
#| label: tidy-weather-data-dataset
#| code-fold: true
#| code-summary: <i>Steps to clean data</i>
weather_data_tidied <- weather_data

paged_table(weather_data_tidied)
```

::: 

### Export Tidied Datasets

Export tidied data sets to csv into `data/tidied` folder.

```{r}
#| label: export-tidied-datasets
#| eval: false
write.csv(ksf_compiled_data_tidied, file = "data/tidied/ksf_compiled_data_tidied.csv", row.names = FALSE)
```

Export merged final data set into `data/outputs` folder.

## Data Dictionary

## Exploratory Data Analysis

## Correlational Analysis